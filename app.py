"""
Dashboard Streamlit para An√°lise Bayesiana
Censo da Educa√ß√£o Superior 2023

Autor: Robson Jobs
Disciplina: Infer√™ncia Bayesiana (2/2025)
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Configura√ß√µes da p√°gina
st.set_page_config(
    page_title="Dashboard - Infer√™ncia Bayesiana",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Importar m√≥dulos locais
try:
    from data_loader import DataLoader
    from bayesian_models import BayesianModels
    from visualizations import Visualizations
    from utils import Utils
    import config
except ImportError as e:
    st.error(f"Erro ao importar m√≥dulos: {e}")
    st.info("Certifique-se de que todos os arquivos necess√°rios est√£o presentes.")

def main():
    """Fun√ß√£o principal do dashboard"""
    
    # T√≠tulo principal
    st.title("üéì Dashboard de Infer√™ncia Bayesiana")
    st.markdown("### An√°lise do Censo da Educa√ß√£o Superior 2023")
    
    # Sidebar para navega√ß√£o
    st.sidebar.title("üß≠ Navega√ß√£o")
    
    # Menu de op√ß√µes
    menu_opcoes = [
        "üè† In√≠cio",
        "üìä An√°lise Explorat√≥ria", 
        "üî¨ Modelos Bayesianos",
        "üìà Visualiza√ß√µes",
        "üîç Compara√ß√£o de Modelos",
        "üìã Relat√≥rios",
        "‚ÑπÔ∏è Sobre"
    ]
    
    escolha = st.sidebar.selectbox("Selecione uma op√ß√£o:", menu_opcoes)
    
    # Se√ß√£o de upload de dados
    st.sidebar.markdown("---")
    st.sidebar.subheader("üìÅ Dados")
    
    uploaded_file = st.sidebar.file_uploader(
        "Carregar arquivo CSV",
        type=['csv'],
        help="Fa√ßa upload dos dados do Censo da Educa√ß√£o Superior"
    )
    
    # Inicializar session state
    if 'data' not in st.session_state:
        st.session_state.data = None
    if 'processed_data' not in st.session_state:
        st.session_state.processed_data = None
    
    # Carregar dados
    if uploaded_file is not None:
        try:
            data_loader = DataLoader()
            st.session_state.data = data_loader.load_csv(uploaded_file)
            st.sidebar.success(f"‚úÖ Dados carregados: {st.session_state.data.shape[0]} registros")
        except Exception as e:
            st.sidebar.error(f"‚ùå Erro ao carregar dados: {e}")
    
    # Roteamento das p√°ginas
    if escolha == "üè† In√≠cio":
        pagina_inicio()
    elif escolha == "üìä An√°lise Explorat√≥ria":
        pagina_analise_exploratoria()
    elif escolha == "üî¨ Modelos Bayesianos":
        pagina_modelos_bayesianos()
    elif escolha == "üìà Visualiza√ß√µes":
        pagina_visualizacoes()
    elif escolha == "üîç Compara√ß√£o de Modelos":
        pagina_comparacao_modelos()
    elif escolha == "üìã Relat√≥rios":
        pagina_relatorios()
    elif escolha == "‚ÑπÔ∏è Sobre":
        pagina_sobre()

def pagina_inicio():
    """P√°gina inicial do dashboard"""
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        ## üéØ Objetivo do Projeto
        
        Este dashboard foi desenvolvido para an√°lise bayesiana dos dados do **Censo da Educa√ß√£o Superior 2023**, 
        permitindo explorar tend√™ncias, padr√µes e fazer infer√™ncias estat√≠sticas sobre o ensino superior brasileiro.
        
        ### üîß Funcionalidades Principais:
        
        - **üìä An√°lise Explorat√≥ria**: Estat√≠sticas descritivas e visualiza√ß√µes iniciais
        - **üî¨ Modelos Bayesianos**: Implementa√ß√£o de diversos modelos estat√≠sticos
        - **üìà Visualiza√ß√µes**: Gr√°ficos interativos e dashboards customizados
        - **üîç Compara√ß√£o**: An√°lise comparativa entre diferentes modelos
        - **üìã Relat√≥rios**: Gera√ß√£o de relat√≥rios detalhados
        
        ### üöÄ Como Come√ßar:
        
        1. **Carregue seus dados** usando o painel lateral
        2. **Explore** as diferentes se√ß√µes do menu
        3. **Configure** os modelos bayesianos
        4. **Analise** os resultados e interpreta√ß√µes
        """)
    
    with col2:
        st.markdown("### üìà Status do Sistema")
        
        # Verificar status dos dados
        if st.session_state.data is not None:
            st.success("‚úÖ Dados carregados")
            st.metric("Registros", st.session_state.data.shape[0])
            st.metric("Vari√°veis", st.session_state.data.shape[1])
        else:
            st.warning("‚ö†Ô∏è Nenhum dado carregado")
            st.info("üëÜ Use o painel lateral para carregar seus dados")
        
        # Exemplo de m√©tricas
        if st.session_state.data is not None:
            st.markdown("### üî¢ Estat√≠sticas R√°pidas")
            st.metric("Universidades", "2.431", delta="12")
            st.metric("Cursos", "41.891", delta="1.254")
            st.metric("Matr√≠culas", "9.046.251", delta="105.476")

def pagina_analise_exploratoria():
    """P√°gina de an√°lise explorat√≥ria dos dados"""
    
    st.header("üìä An√°lise Explorat√≥ria dos Dados")
    
    if st.session_state.data is None:
        st.warning("‚ö†Ô∏è Carregue os dados primeiro usando o painel lateral.")
        return
    
    df = st.session_state.data
    
    # Tabs para organizar a an√°lise
    tab1, tab2, tab3, tab4 = st.tabs(["üìã Vis√£o Geral", "üìä Distribui√ß√µes", "üîó Correla√ß√µes", "üéØ Filtros"])
    
    with tab1:
        st.subheader("Vis√£o Geral dos Dados")
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Total de Registros", df.shape[0])
        with col2:
            st.metric("Total de Vari√°veis", df.shape[1])
        with col3:
            st.metric("Valores Nulos", df.isnull().sum().sum())
        with col4:
            st.metric("Mem√≥ria (MB)", f"{df.memory_usage().sum() / 1024**2:.2f}")
        
        st.subheader("Amostra dos Dados")
        st.dataframe(df.head(10), use_container_width=True)
        
        st.subheader("Informa√ß√µes das Vari√°veis")
        st.dataframe(df.describe(), use_container_width=True)
    
    with tab2:
        st.subheader("Distribui√ß√µes das Vari√°veis")
        
        # Selecionar coluna para an√°lise
        numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
        if numeric_cols:
            selected_col = st.selectbox("Selecione uma vari√°vel:", numeric_cols)
            
            col1, col2 = st.columns(2)
            with col1:
                fig = px.histogram(df, x=selected_col, title=f"Distribui√ß√£o de {selected_col}")
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                fig = px.box(df, y=selected_col, title=f"Box Plot de {selected_col}")
                st.plotly_chart(fig, use_container_width=True)
    
    with tab3:
        st.subheader("Matriz de Correla√ß√£o")
        
        if len(numeric_cols) > 1:
            corr_matrix = df[numeric_cols].corr()
            fig = px.imshow(corr_matrix, text_auto=True, aspect="auto",
                          title="Matriz de Correla√ß√£o")
            st.plotly_chart(fig, use_container_width=True)
    
    with tab4:
        st.subheader("Filtros e Segmenta√ß√£o")
        st.info("üîß Funcionalidade em desenvolvimento")

def pagina_modelos_bayesianos():
    """P√°gina para configura√ß√£o e execu√ß√£o de modelos bayesianos"""
    
    st.header("üî¨ Modelos Bayesianos")
    
    if st.session_state.data is None:
        st.warning("‚ö†Ô∏è Carregue os dados primeiro usando o painel lateral.")
        return
    
    st.markdown("""
    ### Modelos Dispon√≠veis:
    
    Selecione o tipo de modelo bayesiano que deseja aplicar aos dados:
    """)
    
    # Sele√ß√£o do modelo
    modelo_opcoes = [
        "Regress√£o Linear Bayesiana",
        "Regress√£o Log√≠stica Bayesiana", 
        "Modelo Hier√°rquico",
        "An√°lise de Vari√¢ncia Bayesiana",
        "Modelo de Mistura"
    ]
    
    modelo_selecionado = st.selectbox("Escolha um modelo:", modelo_opcoes)
    
    # Configura√ß√µes do modelo
    st.subheader("‚öôÔ∏è Configura√ß√µes do Modelo")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Par√¢metros Gerais:**")
        n_samples = st.number_input("N√∫mero de amostras:", min_value=1000, max_value=10000, value=2000)
        n_chains = st.number_input("N√∫mero de cadeias:", min_value=1, max_value=8, value=2)
        tune_steps = st.number_input("Passos de tuning:", min_value=500, max_value=2000, value=1000)
    
    with col2:
        st.markdown("**Sele√ß√£o de Vari√°veis:**")
        numeric_cols = st.session_state.data.select_dtypes(include=[np.number]).columns.tolist()
        
        if numeric_cols:
            target_var = st.selectbox("Vari√°vel dependente:", numeric_cols)
            predictor_vars = st.multiselect("Vari√°veis independentes:", 
                                          [col for col in numeric_cols if col != target_var])
    
    # Bot√£o para executar modelo
    if st.button("üöÄ Executar Modelo"):
        with st.spinner("Executando modelo bayesiano..."):
            st.info("üîß Funcionalidade em desenvolvimento - Modelo ser√° implementado em breve")
            # Aqui ser√° implementada a l√≥gica do modelo bayesiano
            
    # Resultados (placeholder)
    st.subheader("üìä Resultados do Modelo")
    st.info("Os resultados aparecer√£o aqui ap√≥s a execu√ß√£o do modelo")

def pagina_visualizacoes():
    """P√°gina para visualiza√ß√µes avan√ßadas"""
    
    st.header("üìà Visualiza√ß√µes Interativas")
    
    if st.session_state.data is None:
        st.warning("‚ö†Ô∏è Carregue os dados primeiro usando o painel lateral.")
        return
    
    df = st.session_state.data
    
    # Tipos de visualiza√ß√£o
    viz_opcoes = [
        "Gr√°fico de Dispers√£o",
        "S√©rie Temporal", 
        "Mapa de Calor",
        "Gr√°fico de Barras",
        "Distribui√ß√£o 3D"
    ]
    
    viz_selecionada = st.selectbox("Tipo de visualiza√ß√£o:", viz_opcoes)
    
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    
    if viz_selecionada == "Gr√°fico de Dispers√£o" and len(numeric_cols) >= 2:
        col1, col2 = st.columns(2)
        with col1:
            x_var = st.selectbox("Eixo X:", numeric_cols)
        with col2:
            y_var = st.selectbox("Eixo Y:", [col for col in numeric_cols if col != x_var])
        
        if st.button("Gerar Gr√°fico"):
            fig = px.scatter(df, x=x_var, y=y_var, title=f"{y_var} vs {x_var}")
            st.plotly_chart(fig, use_container_width=True)
    
    else:
        st.info(f"üîß Visualiza√ß√£o '{viz_selecionada}' em desenvolvimento")

def pagina_comparacao_modelos():
    """P√°gina para compara√ß√£o entre modelos"""
    
    st.header("üîç Compara√ß√£o de Modelos")
    st.info("üîß Funcionalidade em desenvolvimento")
    
    st.markdown("""
    ### M√©tricas de Compara√ß√£o:
    
    - **WAIC** (Widely Applicable Information Criterion)
    - **LOO** (Leave-One-Out Cross-Validation)
    - **R-hat** (Potential Scale Reduction Factor)
    - **ESS** (Effective Sample Size)
    """)

def pagina_relatorios():
    """P√°gina para gera√ß√£o de relat√≥rios"""
    
    st.header("üìã Relat√≥rios")
    st.info("üîß Funcionalidade em desenvolvimento")
    
    st.markdown("""
    ### Tipos de Relat√≥rio:
    
    - **Relat√≥rio Executivo**: Resumo das principais descobertas
    - **Relat√≥rio T√©cnico**: Detalhes metodol√≥gicos e estat√≠sticos
    - **Relat√≥rio de Qualidade**: Avalia√ß√£o da qualidade dos dados
    """)

def pagina_sobre():
    """P√°gina com informa√ß√µes sobre o projeto"""
    
    st.header("‚ÑπÔ∏è Sobre o Projeto")
    
    st.markdown("""
    ## üéì Infer√™ncia Bayesiana - Censo da Educa√ß√£o Superior 2023
    
    ### üë®‚Äçüíª Autor
    **Robson Jobs**
    
    ### üè´ Contexto Acad√™mico
    - **Disciplina**: Infer√™ncia Bayesiana
    - **Per√≠odo**: 2/2025
    - **Objetivo**: Trabalho 1 da disciplina
    
    ### üìä Fonte dos Dados
    **Censo da Educa√ß√£o Superior 2023** - INEP/MEC
    
    ### üõ†Ô∏è Tecnologias Utilizadas
    - **Streamlit**: Framework para cria√ß√£o do dashboard
    - **PyMC**: Biblioteca para modelagem bayesiana
    - **Plotly**: Visualiza√ß√µes interativas
    - **Pandas**: Manipula√ß√£o de dados
    - **NumPy**: Computa√ß√£o num√©rica
    - **ArviZ**: An√°lise de resultados bayesianos
    
    ### üìö Refer√™ncias
    - [Streamlit Documentation](https://docs.streamlit.io/)
    - [PyMC Documentation](https://docs.pymc.io/)
    - [Bayesian Methods for Hackers](https://github.com/CamDavidsonPilon/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers)
    
    ### üìÑ Licen√ßa
    Este projeto est√° sob a licen√ßa especificada no arquivo LICENSE.
    """)

if __name__ == "__main__":
    main()